/*     */ package com.sun.xml.rpc.processor.generator;
/*     */ 
/*     */ import com.sun.xml.rpc.processor.config.Configuration;
/*     */ import com.sun.xml.rpc.processor.model.Model;
/*     */ import com.sun.xml.rpc.processor.model.Operation;
/*     */ import com.sun.xml.rpc.processor.model.Port;
/*     */ import com.sun.xml.rpc.processor.model.Service;
/*     */ import com.sun.xml.rpc.processor.util.DirectoryUtil;
/*     */ import com.sun.xml.rpc.processor.util.GeneratedFileInfo;
/*     */ import com.sun.xml.rpc.processor.util.IndentingWriter;
/*     */ import com.sun.xml.rpc.processor.util.ProcessorEnvironment;
/*     */ import com.sun.xml.rpc.soap.SOAPVersion;
/*     */ import java.io.File;
/*     */ import java.io.FileOutputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.OutputStreamWriter;
/*     */ import java.util.Comparator;
/*     */ import java.util.Iterator;
/*     */ import java.util.Properties;
/*     */ import java.util.TreeSet;
/*     */ import javax.xml.namespace.QName;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class ServletConfigGenerator
/*     */   extends GeneratorBase
/*     */ {
/*     */   private File configFile;
/*     */   private Service currentService;
/*     */   private IndentingWriter out;
/*     */   private int portCount;
/*  60 */   private TreeSet operations = null;
/*     */   
/*     */   public ServletConfigGenerator() {
/*  63 */     this.configFile = null;
/*  64 */     this.out = null;
/*  65 */     this.portCount = 0;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public GeneratorBase getGenerator(Model model, Configuration config, Properties properties) {
/*  72 */     return new ServletConfigGenerator(model, config, properties);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public GeneratorBase getGenerator(Model model, Configuration config, Properties properties, SOAPVersion ver) {
/*  80 */     return new ServletConfigGenerator(model, config, properties);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   private ServletConfigGenerator(Model model, Configuration config, Properties properties) {
/*  87 */     super(model, config, properties);
/*  88 */     this.configFile = null;
/*  89 */     this.out = null;
/*  90 */     this.portCount = 0;
/*     */   }
/*     */   
/*     */   protected void preVisitService(Service service) throws Exception {
/*     */     try {
/*  95 */       this.currentService = service;
/*  96 */       String className = service.getName().getLocalPart();
/*  97 */       this.configFile = configFileForClass(className, this.nonclassDestDir, this.env);
/*     */ 
/*     */ 
/*     */       
/* 101 */       GeneratedFileInfo fi = new GeneratedFileInfo();
/* 102 */       fi.setFile(this.configFile);
/* 103 */       fi.setType("ServletConfig");
/* 104 */       this.env.addGeneratedFile(fi);
/*     */       
/* 106 */       this.out = new IndentingWriter(new OutputStreamWriter(new FileOutputStream(this.configFile)));
/*     */ 
/*     */       
/* 109 */       this.portCount = 0;
/* 110 */       this.out.pln("# This file is generated by wscompile.");
/* 111 */       this.out.pln();
/* 112 */     } catch (IOException e) {
/* 113 */       fail("cant.write", this.configFile.toString());
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void postVisitService(Service service) throws Exception {
/*     */     try {
/* 119 */       this.out.pln("portcount=" + this.portCount);
/* 120 */       closeFile();
/* 121 */     } catch (IOException e) {
/* 122 */       fail("cant.write", this.configFile.toString());
/*     */     } finally {
/* 124 */       this.currentService = null;
/*     */     } 
/*     */   }
/*     */   
/*     */   public void visit(Port port) throws Exception {
/* 129 */     int myPortNum = this.portCount;
/* 130 */     this.portCount = myPortNum + 1;
/* 131 */     this.operations = new TreeSet(new StringLenComparator());
/* 132 */     Iterator<Operation> operations = port.getOperations();
/* 133 */     while (operations.hasNext()) {
/* 134 */       ((Operation)operations.next()).accept(this);
/*     */     }
/*     */     try {
/* 137 */       String portID = "port" + myPortNum;
/* 138 */       String servant = null;
/* 139 */       servant = port.getJavaInterface().getImpl();
/* 140 */       if (servant == null) {
/* 141 */         servant = "Please specify the servant class for port:" + port.getName().getLocalPart();
/*     */       }
/*     */ 
/*     */       
/* 145 */       this.out.pln(portID + ".tie=" + this.env.getNames().tieFor(port));
/* 146 */       this.out.pln(portID + ".servant=" + servant);
/* 147 */       this.out.pln(portID + ".name=" + port.getName().getLocalPart());
/* 148 */       this.out.pln(portID + ".wsdl.targetNamespace=" + this.model.getTargetNamespaceURI());
/*     */ 
/*     */ 
/*     */       
/* 152 */       this.out.pln(portID + ".wsdl.serviceName=" + this.currentService.getName().getLocalPart());
/*     */ 
/*     */ 
/*     */       
/* 156 */       QName portName = (QName)port.getProperty("com.sun.xml.rpc.processor.model.WSDLPortName");
/*     */ 
/*     */       
/* 159 */       this.out.pln(portID + ".wsdl.portName=" + portName.getLocalPart());
/* 160 */     } catch (IOException e) {
/* 161 */       fail("generator.cant.write", this.configFile.toString());
/*     */     } 
/*     */   }
/*     */   
/*     */   protected void visitOperation(Operation operation) throws Exception {
/* 166 */     this.operations.add(operation);
/*     */   }
/*     */   
/*     */   private void closeFile() throws IOException {
/* 170 */     if (this.out != null) {
/* 171 */       this.out.close();
/* 172 */       this.out = null;
/*     */     } 
/*     */   }
/*     */   
/*     */   private String getBaseName(String s) {
/* 177 */     if (s.endsWith("Port")) {
/* 178 */       return s.substring(0, s.length() - 4);
/*     */     }
/* 180 */     return s;
/*     */   }
/*     */ 
/*     */   
/*     */   private String getPortName(String s) {
/* 185 */     return getBaseName(s) + "Port";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   protected static File configFileForClass(String className, File destDir, ProcessorEnvironment env) throws GeneratorException {
/* 198 */     File packageDir = DirectoryUtil.getOutputDirectoryFor(className, destDir, env);
/*     */     
/* 200 */     String outputName = Names.stripQualifier(className);
/*     */     
/* 202 */     String outputFileName = outputName + "_Config.properties";
/* 203 */     return new File(packageDir, outputFileName);
/*     */   }
/*     */   
/*     */   private static class StringLenComparator
/*     */     implements Comparator {
/*     */     public int compare(Object o1, Object o2) {
/* 209 */       int len1 = ((Operation)o1).getName().getLocalPart().length();
/* 210 */       int len2 = ((Operation)o2).getName().getLocalPart().length();
/* 211 */       return (len1 <= len2) ? -1 : 1;
/*     */     }
/*     */     
/*     */     private StringLenComparator() {}
/*     */   }
/*     */ }


/* Location:              C:\Users\carlos\Documents\InnoExtractor\Cyber Password Manager 1_0\{app}\cpm_1.0.jar!\com\sun\xml\rpc\processor\generator\ServletConfigGenerator.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */