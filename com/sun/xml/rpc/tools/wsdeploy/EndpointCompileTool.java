/*     */ package com.sun.xml.rpc.tools.wsdeploy;
/*     */ 
/*     */ import com.sun.xml.rpc.processor.Processor;
/*     */ import com.sun.xml.rpc.processor.ProcessorAction;
/*     */ import com.sun.xml.rpc.processor.ProcessorNotificationListener;
/*     */ import com.sun.xml.rpc.processor.config.Configuration;
/*     */ import com.sun.xml.rpc.processor.config.ModelFileModelInfo;
/*     */ import com.sun.xml.rpc.processor.config.RmiInterfaceInfo;
/*     */ import com.sun.xml.rpc.processor.config.RmiModelInfo;
/*     */ import com.sun.xml.rpc.processor.model.Model;
/*     */ import com.sun.xml.rpc.processor.model.Port;
/*     */ import com.sun.xml.rpc.processor.model.Service;
/*     */ import com.sun.xml.rpc.processor.model.java.JavaInterface;
/*     */ import com.sun.xml.rpc.processor.util.GeneratedFileInfo;
/*     */ import com.sun.xml.rpc.processor.util.XMLModelWriter;
/*     */ import com.sun.xml.rpc.spi.tools.Configuration;
/*     */ import com.sun.xml.rpc.spi.tools.ModelInfo;
/*     */ import com.sun.xml.rpc.spi.tools.ProcessorEnvironment;
/*     */ import com.sun.xml.rpc.tools.wscompile.CompileTool;
/*     */ import com.sun.xml.rpc.util.VersionUtil;
/*     */ import com.sun.xml.rpc.util.localization.Localizable;
/*     */ import java.io.File;
/*     */ import java.io.FileNotFoundException;
/*     */ import java.io.OutputStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashSet;
/*     */ import java.util.Hashtable;
/*     */ import java.util.Iterator;
/*     */ import java.util.Properties;
/*     */ import javax.xml.namespace.QName;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class EndpointCompileTool
/*     */   extends CompileTool
/*     */ {
/*     */   protected EndpointInfo endpointInfo;
/*     */   protected WebServicesInfo webServicesInfo;
/*     */   protected File targetDirectory;
/*     */   protected boolean useModel;
/*     */   protected String additionalClasspath;
/*     */   protected Hashtable hashtable;
/*     */   protected ArrayList vector;
/*     */   protected boolean localUseWSIBasicProfile;
/*     */   
/*     */   public EndpointCompileTool(OutputStream out, String program, WebServicesInfo wsi, ArrayList list, File dir, String target, Properties props, String classpath, ProcessorNotificationListener l) {
/*  73 */     super(out, program);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */     
/* 549 */     this.localUseWSIBasicProfile = false; this.webServicesInfo = wsi; this.targetDirectory = dir; this.additionalClasspath = classpath; this.listener = l; this.vector = list; this.endpointInfo = this.vector.get(0); this.useModel = (this.endpointInfo.getModel() != null); this.targetVersion = target; this.verbose = (new Boolean(props.getProperty("verbose"))).booleanValue(); this.keepGenerated = (new Boolean(props.getProperty("keepGenerated"))).booleanValue(); this.donotOverride = true; resetOptionsForTargetVersion(); } public EndpointCompileTool(OutputStream out, String program, EndpointInfo ei, WebServicesInfo wsi, File dir, String target, Properties props, String classpath, ProcessorNotificationListener l) { super(out, program); this.localUseWSIBasicProfile = false; this.endpointInfo = ei; this.webServicesInfo = wsi; this.targetDirectory = dir; this.additionalClasspath = classpath; this.listener = l; this.useModel = (this.endpointInfo.getModel() != null); this.targetVersion = target; this.verbose = (new Boolean(props.getProperty("verbose"))).booleanValue(); this.keepGenerated = (new Boolean(props.getProperty("keepGenerated"))).booleanValue(); this.donotOverride = true; resetOptionsForTargetVersion(); }
/*     */   protected boolean classExists(String className, String message) { try { Class<?> c = Class.forName(className, true, this.environment.getClassLoader()); if (c != null) return true;  } catch (ClassNotFoundException ce) { onError(getMessage("wscompile.fileNotFound", message)); }  return false; }
/* 551 */   protected void beforeHook() { String targetPath = this.targetDirectory.getAbsolutePath(); this.nonclassDestDir = new File(targetPath + FS + "WEB-INF"); this.userClasspath = targetPath + FS + "WEB-INF" + FS + "classes"; this.destDir = new File(this.userClasspath); if ((new File(targetPath + FS + "WEB-INF" + FS + "lib")).exists()) { File[] fs = (new File(targetPath + FS + "WEB-INF" + FS + "lib")).listFiles(); for (int counter = 0; counter < fs.length; counter++) this.userClasspath += PS + fs[counter];  }  if (this.additionalClasspath != null && this.additionalClasspath.length() > 0) this.userClasspath += PS + this.additionalClasspath;  if (!this.useModel) { this.modelFile = new File(makeModelFileName()); } else if (this.targetVersion != null) { onWarning(getMessage("wscompile.warning.ignoringTargetVersionForModel", this.endpointInfo.getModel(), this.targetVersion)); this.targetVersion = null; }  this.serializerInfix = "_" + this.endpointInfo.getName() + "_"; this.compilerDebug = false; this.compilerOptimize = true; super.beforeHook(); } protected void withModelHook() { EndpointInfo ei = null; if (this.endpointInfo.getClientHandlerChainInfo() != null || this.endpointInfo.getServerHandlerChainInfo() != null) { Iterator<Service> services = this.processor.getModel().getServices(); if (services.hasNext()) { Service service = services.next(); this.endpointInfo.setRuntimeServiceName(service.getName()); Iterator<Port> ports = service.getPorts(); Port port = null; QName qName = null; while (ports.hasNext()) { port = ports.next(); if (this.endpointInfo.getModel() == null) { if (port.getJavaInterface().getName().equals(this.endpointInfo.getInterface())) { port.setClientHandlerChainInfo(this.endpointInfo.getClientHandlerChainInfo()); port.setServerHandlerChainInfo(this.endpointInfo.getServerHandlerChainInfo()); }  continue; }  for (int counter = 0; counter < this.vector.size(); counter++) { ei = this.vector.get(counter); if (port.getJavaInterface().getName().equals(ei.getInterface())) { ei.setRuntimeServiceName(service.getName()); port.setClientHandlerChainInfo(ei.getClientHandlerChainInfo()); port.setServerHandlerChainInfo(ei.getServerHandlerChainInfo()); counter = this.vector.size(); }  }  }  }  }  } protected void afterHook() { boolean isCommonInterface = false; HashSet<EndpointInfo> hSet = new HashSet(); if (this.environment.getErrorCount() == 0) { this.endpointInfo.setRuntimeModel(this.useModel ? this.endpointInfo.getModel() : makeAppRelative(this.modelFile)); if (this.endpointInfo.getRuntimeWSDL() == null) this.endpointInfo.setRuntimeWSDL(makeAppRelative(findGeneratedFileEndingWith(".wsdl")));  Iterator<Service> services = this.processor.getModel().getServices(); String modelVersion = ((Model)this.processor.getModel()).getSource(); if (services.hasNext()) { Service service = services.next(); this.endpointInfo.setRuntimeServiceName(service.getName()); Iterator<Port> ports = service.getPorts(); Port port = null; EndpointInfo endpoint = null; String name = null; if (this.endpointInfo.getModel() != null) for (int counter = 0; counter < this.vector.size(); counter++) { endpoint = this.vector.get(counter); name = ""; for (int index = counter + 1; index < this.vector.size(); index++) { if (endpoint.getInterface().equals(((EndpointInfo)this.vector.get(index)).getInterface())) { hSet.add(endpoint); hSet.add(this.vector.get(index)); }  }  }   while (ports.hasNext()) { port = ports.next(); QName portName = (QName)port.getProperty("com.sun.xml.rpc.processor.model.WSDLPortName"); if (portName == null) portName = port.getName();  if (this.endpointInfo.getModel() == null) { classExists(this.endpointInfo.getInterface(), "Interface specified in jaxrpc-ri.xml for " + this.endpointInfo.getName() + " is incorrect"); classExists(this.endpointInfo.getImplementation(), "Implementation specified in jaxrpc-ri.xml for " + this.endpointInfo.getName() + " is incorrect"); if (port.getJavaInterface().getName().equals(this.endpointInfo.getInterface())) { this.endpointInfo.setRuntimePortName(portName); JavaInterface intf = port.getJavaInterface(); this.endpointInfo.setRuntimeTie(this.environment.getNames().tieFor(port)); this.endpointInfo.setRuntimeDeployed(true); }  continue; }  for (int counter = 0; counter < this.vector.size(); counter++) { this.endpointInfo = this.vector.get(counter); classExists(this.endpointInfo.getInterface(), "Interface specified in jaxrpc-ri.xml for " + this.endpointInfo.getName() + " is incorrect"); classExists(this.endpointInfo.getImplementation(), "Implementation specified in jaxrpc-ri.xml for " + this.endpointInfo.getName() + " is incorrect"); if (this.vector.size() > 1) { if (VersionUtil.isVersion103(modelVersion) || VersionUtil.isVersion101(modelVersion)) { if (port.getJavaInterface().getName().equals(this.endpointInfo.getInterface())) setEndpointInfo(this.endpointInfo, portName, service, port);  } else if (hSet.contains(this.endpointInfo) && this.endpointInfo.getRuntimePortName() == null) { onWarning(getMessage("wscompile.warning.noportInfo", this.endpointInfo.getName())); } else if (hSet.contains(this.endpointInfo) && portName.equals(this.endpointInfo.getRuntimePortName())) { setEndpointInfo(this.endpointInfo, portName, service, port); } else if (port.getJavaInterface().getName().equals(this.endpointInfo.getInterface()) && !hSet.contains(this.endpointInfo)) { setEndpointInfo(this.endpointInfo, portName, service, port); }  } else if (port.getJavaInterface().getName().equals(this.endpointInfo.getInterface())) { setEndpointInfo(this.endpointInfo, portName, service, port); }  }  }  }  }  if (this.delegate != null) this.delegate.postRun();  } private void setEndpointInfo(EndpointInfo ei, QName portName, Service service, Port port) { ei.setRuntimeModel(this.useModel ? ei.getModel() : makeAppRelative(this.modelFile)); if (ei.getRuntimeWSDL() == null) ei.setRuntimeWSDL(makeAppRelative(findGeneratedFileEndingWith(".wsdl")));  ei.setRuntimeServiceName(service.getName()); if (ei.getRuntimePortName() == null) ei.setRuntimePortName(portName);  JavaInterface intf = port.getJavaInterface(); ei.setRuntimeTie(this.environment.getNames().tieFor(port)); ei.setRuntimeDeployed(true); } public Configuration createConfiguration() throws Exception { Configuration config = new Configuration((ProcessorEnvironment)this.environment); if (this.useModel) { ModelFileModelInfo modelInfo = new ModelFileModelInfo(); modelInfo.setLocation(makeAbsolute(this.endpointInfo.getModel())); config.setModelInfo((ModelInfo)modelInfo); } else { RmiModelInfo modelInfo = new RmiModelInfo(); modelInfo.setName(this.endpointInfo.getName()); modelInfo.setTargetNamespaceURI(makeTargetNamespaceURI()); modelInfo.setTypeNamespaceURI(makeTypeNamespaceURI()); modelInfo.setJavaPackageName(makeJavaPackageName()); RmiInterfaceInfo interfaceInfo = new RmiInterfaceInfo(); interfaceInfo.setName(this.endpointInfo.getInterface()); interfaceInfo.setServantName(this.endpointInfo.getImplementation()); interfaceInfo.setServerHandlerChainInfo(this.endpointInfo.getServerHandlerChainInfo()); modelInfo.add(interfaceInfo); config.setModelInfo((ModelInfo)modelInfo); }  return (Configuration)config; } protected String makeTargetNamespaceURI() { String base = this.webServicesInfo.getTargetNamespaceBase(); if (base.endsWith("/") || base.startsWith("urn:")) return base + this.endpointInfo.getName();  return base + "/" + this.endpointInfo.getName(); } protected String makeTypeNamespaceURI() { String base = this.webServicesInfo.getTypeNamespaceBase(); if (base.endsWith("/") || base.startsWith("urn:")) return base + this.endpointInfo.getName();  return base + "/" + this.endpointInfo.getName(); } private static final String PS = System.getProperty("path.separator");
/* 552 */   protected String makeModelFileName() { return this.targetDirectory.getAbsolutePath() + FS + "WEB-INF" + FS + this.endpointInfo.getName() + "_model.xml.gz"; } protected String makeJavaPackageName() { return "jaxrpc.generated." + this.environment.getNames().validJavaPackageName(this.endpointInfo.getName()); } protected String makeAbsolute(String s) { if (s == null) return null;  return (new File(this.targetDirectory.getAbsolutePath() + s)).getAbsolutePath(); } protected String makeAppRelative(File f) { if (f == null) return null;  String s = f.getAbsolutePath(); String target = this.targetDirectory.getAbsolutePath(); if (s.startsWith(target)) return s.substring(target.length()).replace(FSCHAR, '/');  return null; } protected File findGeneratedFileEndingWith(String s) { Iterator<GeneratedFileInfo> iter = this.environment.getGeneratedFiles(); while (iter.hasNext()) { GeneratedFileInfo fileInfo = iter.next(); File file = fileInfo.getFile(); if (file.getAbsolutePath().endsWith(s)) return file;  }  return null; } protected void registerProcessorActions(Processor processor) { if (!this.useModel) try { processor.add((ProcessorAction)new XMLModelWriter(this.modelFile)); } catch (FileNotFoundException e) {}  processor.add(getAction("enumeration.generator")); processor.add(getAction("enumeration.encoder.generator")); processor.add(getAction("holder.generator")); processor.add(getAction("custom.class.generator")); processor.add(getAction("soap.object.serializer.generator")); processor.add(getAction("interface.serializer.generator")); processor.add(getAction("soap.object.builder.generator")); processor.add(getAction("literal.object.serializer.generator")); processor.add(getAction("custom.exception.generator")); processor.add(getAction("soap.fault.serializer.generator")); processor.add(getAction("fault.exception.builder.generator")); processor.add(getAction("serializer.registry.generator")); processor.add(getAction("tie.generator")); processor.add(getAction("wsdl.generator")); if (this.delegate != null) this.delegate.postRegisterProcessorActions();  } public void onError(Localizable msg) { if (this.delegate != null) this.delegate.preOnError();  report(getMessage("wscompile.error", this.localizer.localize(msg))); } public void onWarning(Localizable msg) { report(getMessage("wscompile.warning", this.localizer.localize(msg))); } public void onInfo(Localizable msg) { report(getMessage("wscompile.info", this.localizer.localize(msg))); } private static final char PSCHAR = System.getProperty("path.separator").charAt(0);
/*     */   
/* 554 */   private static final String FS = System.getProperty("file.separator");
/* 555 */   private static final char FSCHAR = System.getProperty("file.separator").charAt(0);
/*     */ }


/* Location:              C:\Users\carlos\Documents\InnoExtractor\Cyber Password Manager 1_0\{app}\cpm_1.0.jar!\com\sun\xml\rpc\tools\wsdeploy\EndpointCompileTool.class
 * Java compiler version: 5 (49.0)
 * JD-Core Version:       1.1.3
 */